package net.projecteuler.java;

import java.util.List;
import java.util.Map;

import net.projecteuler.java.util.Number;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:</br>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</br>
 * Let us list the factors of the first seven triangle numbers:</br>
 * 1: 1</br>
 * 3: 1,3</br>
 * 6: 1,2,3,6</br>
 * 10: 1,2,5,10</br>
 * 15: 1,3,5,15</br>
 * 21: 1,3,7,21</br>
 * 28: 1,2,4,7,14,28</br>
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * @author vuser
 *
 */
public class Problem012 {

	public static void main(String[] args) {
		assert calculate(500) == 76576500L : "failed";
	}

	/**
	 * The exponents of the prime factors must be incremented by 1,
	 * and then multiplies them, so we get the number of divisors.
	 * For example:
	 * 28 = 2<sup>2</sup> * 7<sup>1</sup>, therefore 3 * 2 = 6 factors has the number 28. 
	 * @param factor
	 * @return
	 */
	private static long calculate(int factor) {
		long result = 0;

		for (long number = 1; ; ++number) {
			long triangle = number * (number + 1) / 2;
			// List of prime factors
			List<Long> primeFactors = Number.factor(triangle);
			if (filter(primeFactors) >= factor) {
				result = triangle;
				break;
			}
		}

		return result;
	}

	private static int filter(List<Long> factors) {
		int sum = 1;
		Map<Long, Integer> map = Number.primeExponent(factors);
		for (Map.Entry<Long, Integer> entry : map.entrySet()) {
			sum *= entry.getValue() + 1;
		}
		return sum;
	}
}